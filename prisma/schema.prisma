// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Progress tracking
  progress  Progress[]
  
  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  level       Int      // 1-4 for difficulty levels
  order       Int      // For ordering within level
  question    String
  starterCode String   @default("")
  expectedOutput String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Progress tracking
  progress    Progress[]
  
  @@map("courses")
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  completed Boolean  @default(false)
  attempts  Int      @default(0)
  lastAttempt DateTime?
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("progress")
}

model Link {
  id          Int      @id @default(autoincrement())
  title       String
  url         String
  category    String?  // e.g., "documentation", "tutorial", "practice"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("links")
}
